import asyncio
import aiohttp


class DirScanner:

    @classmethod
    async def scan(
        cls,
        word_list: str,
        base_url: str,
        concurrency=8,
        ignored_status: list[int] = list([404]),
        extensions: list[str] = list([]),
    ):
        with open(word_list, 'r') as f:
            paths = [line.strip() for line in f if line.strip()
                     and not line.startswith('#')]

        if not extensions:
            extensions = ['']

        connector = aiohttp.TCPConnector(limit=concurrency)
        timeout = aiohttp.ClientTimeout(total=5)

        async with aiohttp.ClientSession(connector=connector, timeout=timeout) as session:
            sem = asyncio.Semaphore(concurrency)

            async def bounded_check(path: str):
                async with sem:
                    await cls._check_url(session, base_url, path, ignored_status)

            await asyncio.gather(
                *(bounded_check(f'{p}{e}') for p in paths for e in extensions)
            )

    @classmethod
    async def _check_url(
        cls,
        session: aiohttp.ClientSession,
        base_url: str,
        path: str,
        ignored_status: list
    ):
        url = f"{base_url.rstrip('/')}/{path.lstrip()}"
        try:
            async with session.get(url, timeout=2) as response:
                if response.status not in ignored_status:
                    print(f"[{response.status}] {url}")
        except Exception as e:
            print(f"[ERROR] {url} - {e}")
